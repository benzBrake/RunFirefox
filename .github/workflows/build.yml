name: CI

on:
  push:
    branches: [master]
    tags:
      - "v*"
  pull_request:
    branches: [master]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Debug Info
        run: |
          echo "github.ref: ${{ github.ref }}"
          echo "github.event_name: ${{ github.event_name }}"
        shell: bash

      - uses: actions/checkout@v3

      - uses: liudonghua123/action-setup-autoit@main

      - name: Get the version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#*\/v}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Update the version
        shell: bash
        run: |
          sed -i "s/#AutoIt3Wrapper_Res_Fileversion.*/#AutoIt3Wrapper_Res_Fileversion=${{ steps.get_version.outputs.VERSION }}.0/" RunFirefox.au3
          sed -i "s/Global Const \$AppVersion.*/Global Const \$AppVersion = \"${{ steps.get_version.outputs.VERSION }}\"/" RunFirefox.au3

      - name: Generate scripts for all icons
        shell: bash
        run: |
          for icon in icons/*.ico; do
            basename=$(basename "$icon" .ico)
            # 排除原始Firefox图标
            if [ "$basename" != "Firefox" ]; then
              cp RunFirefox.au3 "Run${basename}.au3"
              sed -i "s/Firefox.ico/${basename}.ico/" "Run${basename}.au3"
              sed -i "s/Global Const \$CustomArch.*/Global Const \$CustomArch = \"Run${basename}\"/" "Run${basename}.au3"
              sed -i "s/RunFirefox.exe/Run${basename}.exe/" "Run${basename}.au3"
              sed -i "s/RunFirefox_x64.exe/Run${basename}_x64.exe/" "Run${basename}.au3"
            fi
          done

      - name: Build scripts in parallel
        shell: pwsh
        run: |
          $autoItPath = "C:\Program Files (x86)\AutoIt3\AutoIt3.exe"
          $wrapperPath = "C:\Program Files (x86)\AutoIt3\SciTE\AutoIt3Wrapper\AutoIt3Wrapper.au3"
          
          # 获取所有需要编译的.au3文件
          $scripts = Get-ChildItem -Filter *.au3
          
          # 并行编译，最多4个同时运行
          $scripts | ForEach-Object -Parallel {
              Start-Process -FilePath $using:autoItPath -ArgumentList "`"$using:wrapperPath`" /in `"$($_.FullName)`" /NoStatus" -NoNewWindow -Wait
          } -ThrottleLimit 4

      - name: Check the output
        shell: bash
        run: |
          ls -l

      - name: Package the binaries
        shell: bash
        run: |
          # 仅处理以Run开头的exe文件
          for exe in Run*.exe; do
            # 提取基础名称和架构标识
            if [[ "$exe" == *_x64.exe ]]; then
              basename="${exe%_x64.exe}"
              arch="_x64"
            else
              basename="${exe%.exe}"
              arch=""
            fi
            
            # 生成最终文件名
            zip_name="${basename}_${{ steps.get_version.outputs.VERSION }}${arch}.zip"
            
            # 打包命令
            7z a -tzip "$zip_name" "$exe"
          done

      - uses: xresloader/upload-to-github-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          file: "*.zip"
          tags: true
          draft: false
          overwrite: true

      - name: Create changelog text
        id: changelog
        uses: endaft/action-changelog@v0.0.3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          exclude_types: other,doc,chore

      - name: Update release
        uses: ColinPitrat/update-release@v1.0.1
        with:
          files: "README.md"
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: v${{ steps.get_version.outputs.VERSION }}
          body: ${{ steps.changelog.outputs.changes }}

      - uses: EndBug/add-and-commit@v9
        with:
          push: origin HEAD:master
          add: "*.txt RunFirefox.au3"
          fetch: true
          message: "Bump update information"